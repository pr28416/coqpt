CoqHammer Proof Automation for Dependent Type Theory

CoqHammer is an automated reasoning tool for Coq. It helps in your search for
Coq proofs.
A typical use is to prove relatively simple goals using available lemmas. The
problem is to find appropriate lemmas in a large collection of all accessible
lemmas and combine them to prove the goal. The advantage of a hammer is that
it is a general tool not depending on any domain-specific knowledge and not
requiring configuration by the user. The `hammer` tactic may use all currently
accessible lemmas, including those proven earlier in a given formalization,
not only the lemmas from predefined libraries or hint databases. At present,
however, best results are achieved for statements “close to” first-order logic
and lemmas from the standard library or similar. In comparison to `sauto`, the
current main limitation of `hammer` is its poor effectiveness on problems
heavily dependent on non-first-order features of Coq’s logic (e.g. higher-
order functions, boolean reflection or sophisticated uses of dependent types).

Tutorial

Most useful `sauto` options: `use:`, `inv:`, `ctrs:`, `unfold:`, `db:`, `l:`,
`q:`, `lq:`, `brefl:`, `dep:`.

The `best` tactic (since 1.3.1) automatically finds the best options for
`sauto`. It doesn’t, however, find the dependencies: lemmas (`use:`),
inversions (`inv:`), constructors (`ctrs:`), or unfoldings (`unfold:`). The
`hammer` tactic tries to find the dependencies automatically.

Note that `sauto` or `hammer` never perform induction. When induction is
needed, it must be done manually.

Sauto

The `Tactics` module contains `sauto` and related tactics. These tactics are
used by the `hammer` tool for proof reconstruction. To use them directly in
your proof scripts first include:

    
    
    From Hammer Require Import Tactics.
    

The easiest way to use `sauto` is via the `best` tactic (since 1.3.1). The
`best` tactic tries a number of `sauto` variants with different options. However, familiarity with different tactics from the `Tactics`
module and with various `sauto` options often results in more effective use.

Note that `sauto` and related tactics never perform induction. When induction
is needed, it must be done manually.

The `Tactics` module provides “solvers” which either solve the goal or fail,
and “simplifiers” which simplify the goal but do not perform backtracking
proof search. The simplifiers never fail. The solvers are based on variants of
the `sauto` tactic or its sub-components. The simplifiers are based on
variants of the heuristics and simplifications performed by `sauto` upon
context change.

Below we list the solvers and the simplifiers in the order of increasing
strength and decreasing speed:

  * solvers: `sdone`, `strivial`, `qauto`, `hauto`, `sauto`;
  * simplifiers: `simp_hyps`, `sintuition`, `qsimpl`, `ssimpl`.

The `hauto` tactic is just `sauto inv: - ctrs: -`. The `qauto` tactic is just
`hauto quick: on limit: 100 finish: (eauto; congruence 400)`.

The `sdone` tactic is used by `sauto` as the final tactic at the leaves of the
proof search tree (see the `final:` and `finish:` options). The `strivial`
tactic is just `srun (sfinal sdone)`.

Additional variants of the solvers are used in the reconstruction backend of
the `hammer` tactic. The solvers listed here are the ones most suited for
standalone use.

Options for sauto

Most useful `sauto` options: `use:`, `inv:`, `ctrs:`, `unfold:`, `db:`, `l:`,
`q:`, `lq:`, `brefl:`, `dep:`. Use your browser’s “find” function to search
for their descriptions in this section.

The `best` tactic (since 1.3.1) automatically finds the best options for
`sauto`. It doesn’t, however, find the dependencies: lemmas (`use:`),
inversions (`inv:`), constructors (`ctrs:`), or unfoldings (`unfold:`). The
`hammer` tactic tries to find the dependencies automatically.

The `best` tactic accepts the same options as `sauto` \- the provided options
are appended to the options of the tried variants of `sauto`, possibly
overriding them. For example, if you want to automatically find the best
variant of `sauto` which performs search up to depth 3 and uses lemma `lem1`
then write:

    
    
    best depth: 3 use: lem1
    

Note that immediately upon success you are supposed to replace the `best`
tactic with the tactic shown in the response window.

The `sauto` options take arguments specified by:

    
    
    <bopt> ::= on | off
    <db> ::= <hintDb> | <rewDb>
    <X-list> ::= <X>, .., <X> | - | *
    

Additionaly, `<number>` denotes a natural number, `<term>` a Coq term,
`<const>` a Coq constant, `<ind>` an inductive type, `<hintDb>` a hint
database, `<rewDb>` a rewriting hint database, `<tactic>` a tactic. For a
list, `-` denotes the empty list, `*` denotes the list of all available
objects of a given type (e.g., `*` for `<ind-list>` denotes the list of all
inductive types).

Below is a list of options for `sauto` and its variants. The defaults are for
`sauto`.

  * `use: <term-list>`

Add the listed lemmas at the top of the context. Default: `use: -`.

  * `inv: <ind-list>`

Try performing inversion (case reasoning) on values of the listed inductive
types. Default: `inv: *`.

This does not affect inversion for the inductive types representing logical
connectives. Use `inv: never` to prevent inversion for logical connectives.

  * `ctrs: <ind-list>`

Try using constructors of listed inductive types. Default: `ctrs: *`.

This does not affect constructors of the inductive types representing logical
connectives. Use `ctrs: never` to prevent using constructors of logical
connectives.

  * `unfold: <const-list>`

Try unfolding the listed definitions based on heuristic criteria. Default:
`unfold: -`.

This does not affect `iff` and `not` which are treated specially and always
unfolded. Use `unfold: never` to prevent this behaviour.

  * `unfold!: <const-list>`

Always unfold the listed definitions. A primitive version of `unfold:` without
heuristics. Default: `unfold!: -`.

  * `db: <db-list>`

Use the listed hint databases (accepts both `auto` and `autorewrite` hint
databases). Default: `db: -`.

  * `hint:db: <db-list>`

Use the listed `auto` hint databases. Default: `hint:db: -`.

  * `rew:db: <db-list>`

Use the listed `autorewrite` hint databases. Default: `rew:db: -`.

  * `cases: <ind-list>`

Eliminate discriminees in case expressions when the discriminee has one of the
listed inductive types. If `ecases: on` then elimination of match disciminees
is performed eagerly, otherwise with backtracking. Default: `cases: *`,
`ecases: on`.

  * `split: <sind-list>`

Eagerly apply constructors of the listed “simple” inductive types. An
inductive type is “simple” if it is non-recursive with exactly one
constructor, and such that the application of the constructor does not
introduce new existential variables. Default: `split: -`.

This does not affect inductive types representing logical connectives. Use
`split: never` to prevent eager applications of constructors of “simple”
inductive types representing logical connectives (i.e., conjunction and
existential quantification).

  * `limit: <number>`

Limit the cost of the entire proof tree. Note that this does not directly
limit the depth of proof search, but only the cost of the whole proof tree,
according to the cost model built into `sauto`. Default: `limit: 1000`.

  * `depth: <number>`

Directly limit the depth of proof search. Cancels the `limit:` option.

  * `time: <number>` (since 1.3.1)

Set the timeout in seconds. Currently, this is meaningful only for the `best`
tactic where the default is 1 second.

  * `finish: <tactic>`

Set a tactic to use at the leaves of the proof search tree. Default: `finish:
(sfinal sdone)`.

  * `final: <tactic>`

Shorthand for `finish: (sfinal <tactic>)`. Default: `final: sdone`.

  * `simp: <tactic>`

Set a tactic for additional simplification after context change. This option
is for additional simplification - it has no impact on other simplifications
performed by `sauto`. The default `simp:` tactic does not actually simplify
but tries to fully solve the goal. Default: `simp: (sfinal sdone)`.

  * `simp+: <tactic>`

Add a tactic for additional simplification after context change, keeping all
previously registered `simp:` tactics.

  * `ssimp: <tactic>`

Set a tactic for additional strong simplification in `ssimpl` and `qsimpl`.
Default: `ssimp: ssolve`.

  * `ssimp+: <tactic>`

Add a tactic for additional strong simplification in `ssimpl` and `qsimpl`,
keeping all previously registered `ssimp:` tactics.

  * `solve: <tactic>`

Set a solver tactic to run at each node of the proof search tree. For
instance, for goals involving real numbers one might use `solve: lra`.
Default: `solve: -`.

  * `solve+: <tactic>`

Add a solver tactic to run at each node of the proof search tree, keeping all
previously registered `solve:` tactics.

  * `fwd: <bopt>`

Controls whether to perform limited forward reasoning. Default: `fwd: on`.

  * `ecases: <bopt>`

Controls whether elimination of discriminees in case expressions is performed
eagerly. Default: `ecases: on`.

  * `sinv: <bopt>`

Controls whether to use the “simple inverting” heuristic. This heuristic
eagerly inverts all hypotheses `H : I` with `I` inductive when the number of
subgoals generated by the inversion is at most one. Default: `sinv: on`.

  * `einv: <bopt>`

Controls whether to use the “eager simple elimination restriction”, i.e.,
eagerly invert all hypotheses which have a non-recursive inductive type with
arguments (parameters or indices). Default: `einv: on`.

  * `ered: <bopt>`

Controls whether reduction (with `simpl`) is performed eagerly. Default:
`ered: on`.

  * `red: <bopt>`

Controls whether to perform reduction with `simpl`. When `red: on`, it depends
on the `ered:` option if reduction is performed eagerly or with backtracking.
Default: `red: on`.

  * `erew: <bopt>`

Controls whether directed rewriting is performed eagerly. Directed rewriting
means rewriting with hypotheses orientable with LPO. If `erew: off` but `drew:
on`, directed rewriting is still performed but with backtracking. Default:
`erew: on`.

  * `drew: <bopt>`

Controls whether to perform directed rewriting. Default: `drew: on`.

  * `urew: <bopt>`

Controls whether to perform undirected rewriting. Default: `urew: on`.

  * `rew: <bopt>`

This is a compound option which controls the `drew` and `urew` options.
Setting `drew: on` implies `drew: on` and `urew: on`. Setting `rew: off`
implies `drew: off` and `urew: off`. Default: `rew: on`.

  * `brefl: <bopt>`
  * `b: <bopt>` (since 1.3.1)

Controls whether to perform boolean reflection, i.e., convert elements of
`bool` applied to `is_true` into statements in `Prop`. Setting `brefl: on`
implies `ecases: off` \- use `brefl!:` to prevent this behaviour. You may also
re-enable `ecases:` by providing `ecases: on` after `brefl: on`. Default:
`brefl: off`.

  * `brefl!: <bopt>`
  * `b!: <bopt>` (since 1.3.1)

A primitive version of `brefl:` which when enabled does not automatically
disable `ecases:`.

  * `sapp: <bopt>`

Controls whether to use the `sapply` tactic for application. The `sapply`
tactic performs application modulo simple equational reasoning. This increases
the success rate, but decreases speed. Default: `sapp: on`.

  * `exh: <bopt>`

Controls whether to perform backtracking on instantiations of existential
variables. Default: `exh: off`.

  * `lia: <bopt>`

Controls whether to try the `lia` tactic for arithmetic subgoals. Default:
`lia: on`.

Note that invoking `lia` is done via the default `simp:` and `finish:` tactics
- if these tactics are changed then `lia:` has no effect. To re-enable `lia`
use `solve: lia` or `solve+: lia`.

Extra tactics

In addition to the solvers and the simplifiers listed,
the `Tactics` module contains a number of handy tactics which are used
internally by `sauto`.

  * `sdestruct t`

Destruct `t` in the “right” way, introducing appropriate hypotheses into the
context and handling boolean terms correctly (automatically performing boolean
reflection).

  * `dep_destruct t`

Dependent destruction of `t`. A simple wrapper around the `dependent
destruction` tactic from the Program module.

  * `sinvert t`

Inversion of the conclusion of `t`. The type of `t` may be quantified - then
new existential variables are introduced or new subgoals are generated for the
arguments.

  * `sdepinvert t`

Dependent inversion of the conclusion of `t`. The same as `sinvert t` but may
use the `depelim` tactic for inversion.

  * `sapply t`

Apply `t` modulo simple heuristic equational reasoning. See the `sapp:`
option.

  * `bool_reflect`

Boolean reflection in the goal and in all hypotheses.

  * `use lem1, .., lemn`

Add the listed lemmas at the top of the context and simplify them.

  * `srun tac <sauto-options>`

The `srun` tactical first interprets sauto options and performs `sauto` initialisation, then runs `unshelve solve [
tac ]`, and then tries to solve the unshelved subgoals with `auto`, `easy` and
`do 10 constructor`.

Only the following options are interpreted by `srun`: `use:`, `unfold:`,
`unfold!:`, `brefl:`, `brefl!:`, `red:`, `ered:`, `sig:`. Other options have
no effect.

The `sauto` initialisation performed by `srun` executes the actions
corresponding to the options listed here. The default values of the options
are like for `sauto`.

  * `sfinal tac`

Perform “final” simplifications of the goal (simplifying hypotheses,
eliminating universally quantified disjunctions and existentials) and solve
all the resulting subgoals with `tac`. The `sfinal tac` tactic invocation
fails if `tac` does not solve some of the resulting subgoals.

  * `forwarding`

Limited forward reasoning corresponding to the `fwd:` option.

  * `forward_reasoning n`

Repeated forward reasoning with repetition limit `n`. This is similar to but
not exactly the same as `do n forwarding`.

  * `simpl_sigma`

Simplifications for sigma-types. Composed of two tactics: `destruct_sigma`
which eagerly destructs all elements of subset types occurring as arguments to
the first projection, and `invert_sigma` which is a faster but weaker version
of `inversion_sigma` from the standard library. The `simpl_sigma` tactic
corresponds to the `sig:` option.

  * `generalize proofs`
  * `generalize proofs in H`
  * `generalize proofs in *`

Generalizes by proof terms occurring in the goal and/or a hypothesis.
Corresponds to the `prf:` option.

  * `srewriting`

Directed rewriting with the hypotheses which may be oriented using LPO. See
the `drew:` and `erew:` options.

  * `simple_inverting`
  * `simple_inverting_dep`

Perform “simple inversion” corresponding to the `sinv:` option. The `_dep`
version may use the `depelim` tactic.

  * `eager_inverting`
  * `eager_inverting_dep`

Perform “eager simple elimination” corresponding to the `einv:` option. The
`_dep` version may use the `depelim` tactic.

  * `case_split`
  * `case_split_dep`

Eliminate one discriminee of a match expression occurring in the goal or in a
hypothesis. The `_dep` version may use the `depelim` tactic.

  * `case_splitting`
  * `case_splitting_dep`

Eagerly eliminate all discriminees of match expressions occurring in the goal
or in a hypothesis. This corresponds to the action enabled by setting `cases:
*` and `ecases: on`. The `_dep` version may use the `depelim` tactic.

  * `simple_splitting`

Eagerly apply constructors of “simple” inductive types - non-recursive
inductive types with exactly one constructor such that application of the
constructor does not introduce new existential variables. This corresponds to
`split: *`.

  * `simple_splitting logic`

Simple splitting for logical connectives only.

  * `ssolve`

The `ssolve` tactic is just

    
        solve [ (intuition auto); try sfinal sdone; try congruence 24;
             try easy; try solve [ econstructor; sfinal sdone ] ].
    

Boolean reflection

Importing the Reflect module with

    
    
    From Hammer Require Import Reflect.
    

declares `is_true` as a coercion and makes available the following tactics
related to boolean reflection.

  * `breflect`
  * `breflect in H`
  * `breflect in *`

Perform boolean reflection - convert boolean statements (arguments of
`is_true`) into propositions in `Prop`, and boolean comparisons (on basic
types from the standard library) into the corresponding inductive types.

The `breflect` tactic just performs generalised top-down rewriting (also under
binders) with the `brefl` rewrite hint database. This allows for easy
customisation of boolean reflection by adding lemmas expressing reflection of
user-defined boolean predicates. For instance, suppose you have a boolean
predicate

    
        sortedb : list nat -> bool
    

and a corresponding inductive predicate

    
        sorted : list nat -> Prop
    

and a lemma

    
        sortedb_sorted_iff : forall l : list nat, is_true (sortedb l) <-> sorted l
    

Then adding the rewrite hint

    
        Hint Rewrite -> sortedb_sorted_iff : brefl.
    

will result in `breflect` automatically converting `is_true (sortedb l)` to
`sorted l`. This will then also be done by `bool_reflect` and by `sauto` with
`brefl: on`, because these tactics internally use `breflect`.

  * `breify`
  * `breify in H`
  * `breify in *`

The reverse of `breflect`. Uses the `breif` rewrite hint database.

  * `bsimpl`
  * `bsimpl in H`
  * `bsimpl in *`

Simplify boolean expressions. This is just generalised top-down rewriting with
the `bsimpl` database.

  * `bdestruct t`
  * `bdestruct t as H`

Destruct a boolean term `t` in the “right” way, introducing an appropriate
hypothesis into the context and automatically performing boolean reflection on
it. The second form of the tactic provides an explicit name for the introduced
hypothesis. A successful run of `bdestruct` always results in two subgoals
with one new hypothesis in each.

  * `blia`

Perform boolean reflection and then run `lia`.

Hammer

In your Coq file editor or toplevel (e.g., `coqide` or `coqtop`), first load
the hammer plugin:

    
    
    From Hammer Require Import Hammer.
    

The available commands are:

command | description  
---|---  
`hammer` | Runs the hammer tactic.  
`predict n` | Prints n dependencies for the current goal predicted by the
machine-learning premise selection.  
`Hammer_version` | Prints the version of CoqHammer.  
`Hammer_cleanup` | Resets the hammer cache.  

Note that `hammer` never performs induction. If induction is needed, it must
be done manually before invoking `hammer`.

---
Examples: The following code demonstrates examples of the usage of CoqHammer tactics.
---

From Hammer Require Import Hammer.

(*********************************************************************************************)

(*
Lemma lem_false : False.
Proof.
  hammer.
Qed.*)

(*
Lemma lem_classic : forall P : Prop, P \/ ~P.
Proof.
  hammer.
Qed.*)

Require Import Arith.

(* disable the preliminary sauto tactic *)
Set Hammer SAutoLimit 0.

Lemma lem_1 : le 1 2.
  hammer. Restart.
  scongruence use: Nat.lt_0_2 unfold: lt.
Qed.

Lemma lem_2 : forall n : nat, Nat.Odd n \/ Nat.Odd (n + 1).
  hammer. Restart.
  hauto lq: on use: Nat.Even_or_Odd, Nat.add_1_r, Nat.Odd_succ.
Qed.

Lemma lem_2_1 : forall n : nat, Nat.Even n \/ Nat.Even (n + 1).
  hammer. Restart.
  hauto lq: on use: Nat.add_1_r, Nat.Even_or_Odd, Nat.Even_succ.
Qed.

Lemma lem_3 : le 2 3.
  hammer. Restart.
  srun eauto use: Nat.le_succ_diag_r unfold: Init.Nat.two.
Qed.

Lemma lem_4 : le 3 10.
  hammer. Restart.
  sfirstorder use: Nat.nle_succ_0, Nat.le_gt_cases, Nat.lt_succ_r, Nat.succ_le_mono, Nat.log2_up_2 unfold: Init.Nat.two.
Qed.

Lemma mult_1 : forall m n k : nat, m * n + k = k + n * m.
Proof.
  hammer. Restart.
  scongruence use: Nat.mul_comm, Nat.add_comm.
Qed.

Lemma lem_rew : forall m n : nat, 1 + n + m + 1 = m + 2 + n.
Proof.
  hammer. Restart.
  strivial use: Nat.add_comm, Nat.add_1_r, Nat.add_shuffle1, Nat.add_assoc.
Qed.

Lemma lem_pow : forall n : nat, 3 * 3 ^ n = 3 ^ (n + 1).
Proof.
  hammer. Restart.
  qauto use: Nat.pow_succ_r, Nat.le_0_l, Nat.add_1_r.
Qed.

Require Coq.Reals.RIneq.
Require Coq.Reals.Raxioms.
Require Coq.Reals.Rtrigo1.

Lemma cos_decreasing_1 :
  forall y x : Rdefinitions.R,
    Rdefinitions.Rlt x y ->
    Rdefinitions.Rle x Rtrigo1.PI ->
    Rdefinitions.Rge y Rdefinitions.R0 ->
    Rdefinitions.Rle y Rtrigo1.PI ->
    Rdefinitions.Rge x Rdefinitions.R0 ->
    Rdefinitions.Rlt (Rtrigo_def.cos y) (Rtrigo_def.cos x).
Proof.
  (* hammer. Restart. *)
  hauto using (@Reals.Rtrigo1.cos_decreasing_1, @Reals.RIneq.Rge_le).
Qed.

Require ZArith.BinInt.

Lemma max_lub : forall m p k n : BinNums.Z,
                  BinInt.Z.ge p m -> BinInt.Z.le n p -> BinInt.Z.le (BinInt.Z.max n m) p.
Proof.
  hammer. Restart.
  srun eauto use: BinInt.Z.max_lub, BinInt.Z.ge_le.
Qed.

Require Reals.

Lemma lem_iso : forall x1 y1 x2 y2 theta : Rdefinitions.R,
    Rgeom.dist_euc x1 y1 x2 y2 =
    Rgeom.dist_euc (Rgeom.xr x1 y1 theta) (Rgeom.yr x1 y1 theta) (Rgeom.xr x2 y2 theta)
                   (Rgeom.yr x2 y2 theta).
Proof.
  hammer. Restart.
  scongruence use: Rgeom.isometric_rotation.
Qed.

Require Import List.

Lemma lem_lst :
  forall {A} (x : A) l1 l2 (P : A -> Prop),
    In x (l1 ++ l2) -> (forall y, In y l1 -> P y) -> (forall y, In y l2 -> P y) ->
    P x.
Proof.
  hammer. Restart.
  qauto use: in_app_iff.
  (* `firstorder with datatypes' does not work *)
Qed.

Lemma lem_lst2 : forall {A} (y1 y2 y3 : A) l l' z, In z l \/ In z l' ->
                                                   In z (y1 :: y2 :: l ++ y3 :: l').
Proof.
  hammer. Restart.
  hauto lq: on use: in_app_iff, in_or_app, not_in_cons, in_cons, Add_in unfold: app.
  (* `firstorder with datatypes' does not work *)
Qed.

Lemma lem_lst3 : forall {A} (l : list A), length (tl l) <= length l.
Proof.
  hammer. Restart.
  qauto use: le_S, Nat.le_0_l, le_n unfold: tl, length.
Qed.

Require NArith.Ndec.

Lemma Nleb_alt :
  forall b a c : BinNums.N, Ndec.Nleb b c = BinNat.N.leb b c /\ Ndec.Nleb a b = BinNat.N.leb a b.
Proof.
  hammer. Restart.
  srun eauto use: Ndec.Nleb_alt.
Qed.